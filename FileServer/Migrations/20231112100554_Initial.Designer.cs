// <auto-generated />
using System;
using FileServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231112100554_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FileServer.Models.AccessModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int>("FileModelId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("Accesses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            FileModelId = 1,
                            UserModelId = 3
                        });
                });

            modelBuilder.Entity("FileServer.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareToAll")
                        .HasColumnType("int");

                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bytes = new byte[] { 1, 2, 3 },
                            Name = "file1",
                            ShareToAll = 1,
                            UserModelId = 2
                        },
                        new
                        {
                            Id = 2,
                            Bytes = new byte[] { 1, 2, 3 },
                            Name = "file2",
                            ShareToAll = 2,
                            UserModelId = 3
                        });
                });

            modelBuilder.Entity("FileServer.Models.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FileServer.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleModelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "admin",
                            RoleModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            Login = "user",
                            Password = "user",
                            RoleModelId = 2
                        },
                        new
                        {
                            Id = 3,
                            Login = "user1",
                            Password = "user1",
                            RoleModelId = 2
                        });
                });

            modelBuilder.Entity("FileServer.Models.AccessModel", b =>
                {
                    b.HasOne("FileServer.Models.FileModel", "FileModel")
                        .WithMany("SharedUsers")
                        .HasForeignKey("FileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileServer.Models.UserModel", "UserModel")
                        .WithMany("Access")
                        .HasForeignKey("UserModelId");

                    b.Navigation("FileModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("FileServer.Models.FileModel", b =>
                {
                    b.HasOne("FileServer.Models.UserModel", "UserModel")
                        .WithMany("Files")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("FileServer.Models.UserModel", b =>
                {
                    b.HasOne("FileServer.Models.RoleModel", "RoleModel")
                        .WithMany("UserModel")
                        .HasForeignKey("RoleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleModel");
                });

            modelBuilder.Entity("FileServer.Models.FileModel", b =>
                {
                    b.Navigation("SharedUsers");
                });

            modelBuilder.Entity("FileServer.Models.RoleModel", b =>
                {
                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("FileServer.Models.UserModel", b =>
                {
                    b.Navigation("Access");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
